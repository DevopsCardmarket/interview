apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  name: user-service
  namespace: user-service
spec:
  replicas: 2
  selector:
    matchLabels:
      app: user-service
  template:
    metadata:
      labels:
        app: user-service
      annotations:
        sidecar.istio.io/inject: "true"
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
        sidecar.istio.io/rewriteAppProbes: "false"
    spec:
      containers:
      - name: user-service
        image: jendyjasper/user-service:6.2.0
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          protocol: TCP
          name: http-web
        env:
        - name: DATABASE_HOST
          valueFrom:
            configMapKeyRef:
              name: user-service-config
              key: DATABASE_HOST
        - name: DATABASE_PORT
          valueFrom:
            configMapKeyRef:
              name: user-service-config
              key: DATABASE_PORT
        - name: DATABASE_NAME
          valueFrom:
            configMapKeyRef:
              name: user-service-config
              key: DATABASE_NAME
        - name: DATABASE_USER
          valueFrom:
            configMapKeyRef:
              name: user-service-config
              key: DATABASE_USER
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: user-service-secret
              key: DATABASE_PASSWORD
        - name: ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: user-service-config
              key: ENVIRONMENT
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: user-service-config
              key: LOG_LEVEL
        - name: METRICS_ENABLED
          valueFrom:
            configMapKeyRef:
              name: user-service-config
              key: METRICS_ENABLED
        startupProbe:
          httpGet:
            path: /startup
            port: 8000
          failureThreshold: 30
          periodSeconds: 10
          initialDelaySeconds: 30
          timeoutSeconds: 3
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8000
          initialDelaySeconds: 45
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 1
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
  strategy:
    canary:
      canaryService: user-service-canary
      stableService: user-service-stable
      trafficRouting:
        istio:
          virtualService:
            name: user-service
            routes:
              - primary
      steps:
      - setWeight: 25
      - pause: {duration: 300}
      - setWeight: 50
      - pause: {duration: 300}
      - setWeight: 100